# -*- coding: utf-8 -*-
"""Problem_C2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Wi1GjpJNN5Qto8JaNbN3Lc-FzWN4l7e
"""

# =============================================================================
# PROBLEM C2
#
# Create a classifier for the MNIST Handwritten digit dataset.
# The test will expect it to classify 10 classes.
#
# Don't use lambda layers in your model.
#
# Desired accuracy AND validation_accuracy > 91%
# =============================================================================

import tensorflow as tf
from tensorflow import keras

def solution_C2():
    mnist = tf.keras.datasets.mnist
    (train_images, train_labels), (val_images, val_labels) = mnist.load_data()

    train_images = train_images / 255.0
    val_images = val_images / 255.0

    model = keras.Sequential([
        keras.layers.Conv2D(8,(3,3), input_shape=(28,28,1), activation='relu'),
        keras.layers.MaxPooling2D(2,2),
        keras.layers.Conv2D(16,(3,3), activation='relu'),
        keras.layers.MaxPooling2D(2,2),
        keras.layers.Conv2D(32,(3,3), activation='relu'),
        keras.layers.MaxPooling2D(2,2),
        keras.layers.Flatten(),
        keras.layers.Dense(64, activation='relu'),
        keras.layers.Dense(10, activation='softmax')
    ])

    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])

    class myCallback(tf.keras.callbacks.Callback):
        def on_epoch_end(self, epoch, logs=None):
            if logs.get('accuracy') > 0.95 and logs.get('val_accuracy') > 0.95:
                self.model.stop_training = True

    checkpoint_callback = myCallback()

    history = model.fit(train_images,
                        train_labels,
                        epochs=100,
                        validation_data=(val_images,val_labels),
                        verbose=2,
                        callbacks=[checkpoint_callback])

    return model


# The code below is to save your model as a .h5 file.
# It will be saved automatically in your Submission folder.
if __name__ == '__main__':
    # DO NOT CHANGE THIS CODE
    model = solution_C2()
    model.save("model_C2.h5")